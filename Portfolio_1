/*
Covid 19 Data Exploration 
Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types
*/
---CODE FOR CREATING COVID DEATH TABLE

CREATE TABLE CovidDeaths(
iso_code VARCHAR(100),
continent VARCHAR(100),
location VARCHAR(100),
date VARCHAR(100),
population FLOAT,
total_cases FLOAT,
new_cases FLOAT,
new_cases_smoothed VARCHAR(100),
total_deaths VARCHAR(100),
new_deaths VARCHAR(100),
new_deaths_smoothed VARCHAR(100),
total_cases_per_million FLOAT,
new_cases_per_million FLOAT,
new_cases_smoothed_per_million VARCHAR(100),
total_deaths_per_million VARCHAR(100),
new_deaths_per_million VARCHAR(100),
new_deaths_smoothed_per_million VARCHAR(100),
reproduction_rate VARCHAR(100),
icu_patients VARCHAR(100),
icu_patients_per_million VARCHAR(100),
hosp_patients VARCHAR(100),
hosp_patients_per_million VARCHAR(100),
weekly_icu_admissions VARCHAR(100),
weekly_icu_admissions_per_million VARCHAR(100),
weekly_hosp_admissions VARCHAR(100),
weekly_hosp_admissions_per_million VARCHAR(100)
);

copy CovidDeaths from 'C:\Program Files\PostgreSQL\14\data\CovidDeaths.csv' DELIMITER ',' CSV header;

Select *
From CovidDeaths
Where continent is not null 
order by 3,4


-- Select Data that we are going to be starting with

Select Location, date, total_cases, new_cases, total_deaths, population
From CovidDeaths
Where continent is not null 
order by 1,2


-- Total Cases vs Total Deaths
-- Shows likelihood of dying if you contract covid in your country

Select Location, date, total_cases,total_deaths, (total_deaths/(cast(total_cases as int))*100 AS DeathPercentage
From CovidDeaths
Where location like '%states%'
and continent is not null 
order by 1,2


-- Total Cases vs Population
-- Shows what percentage of population infected with Covid

Select Location, date, Population, total_cases,  (total_cases/population)*100 as PercentPopulationInfected
From CovidDeaths
--Where location like '%states%'
order by 1,2


-- Countries with Highest Infection Rate compared to Population

Select Location, Population, MAX(total_cases) as HighestInfectionCount,  Max((total_cases/population))*100 as PercentPopulationInfected
From CovidDeaths
--Where location like '%states%'
Group by Location, Population
order by HighestInfectionCount desc


-- Countries with Highest Death Count per Population

Select Location, MAX(cast(Total_deaths as int)) as TotalDeathCount
From CovidDeaths
--Where location like '%states%'
Where LOCATION like '%Nigeria%'
Group by Location
order by TotalDeathCount desc



-- BREAKING THINGS DOWN BY CONTINENT

-- Showing contintents with the highest death count per population

Select continent, MAX(cast(Total_deaths as int)) as TotalDeathCount
From CovidDeaths
--Where location like '%states%'
Where continent is not null 
Group by continent
order by TotalDeathCount desc



-- GLOBAL NUMBERS

Select SUM(new_cases) as total_cases, SUM(cast(new_deaths as int)) as total_deaths, SUM(cast(new_deaths as int))/SUM(New_Cases)*100 as DeathPercentage
From CovidDeaths
--Where location like '%states%'
where continent is not null 
--Group By date
order by 1,2

--CREATE COVIDVACCINATIONS TABLE
												  
CREATE TABLE CovidVaccinations(
iso_code VARCHAR(100),
continent VARCHAR(100),
location VARCHAR(100),
date VARCHAR(100),
total_tests VARCHAR(100),
new_tests VARCHAR(100),
total_tests_per_thousand VARCHAR(100),
new_tests_per_thousand VARCHAR(100),
new_tests_smoothed VARCHAR(100),
new_tests_smoothed_per_thousand VARCHAR(100),
positive_rate VARCHAR(100),
tests_per_case VARCHAR(100),
tests_units VARCHAR(100),
total_vaccinations VARCHAR(100),
people_vaccinated VARCHAR(100),
people_fully_vaccinated VARCHAR(100),
total_boosters VARCHAR(100),
new_vaccinations VARCHAR(100),
new_vaccinations_smoothed VARCHAR(100),
total_vaccinations_per_hundred VARCHAR(100),
people_vaccinated_per_hundred VARCHAR(100),
people_fully_vaccinated_per_hundred VARCHAR(100),
total_boosters_per_hundred VARCHAR(100),
new_vaccinations_smoothed_per_million VARCHAR(100),
new_people_vaccinated_smoothed VARCHAR(100),
new_people_vaccinated_smoothed_per_hundred VARCHAR(100),
stringency_index FLOAT,
population_density FLOAT,
median_age FLOAT,
aged_65_older FLOAT,
aged_70_older FLOAT,
gdp_per_capita FLOAT,
extreme_poverty VARCHAR(100),
cardiovasc_death_rate FLOAT,
diabetes_prevalence FLOAT,
female_smokers VARCHAR(100),
male_smokers VARCHAR(100),
handwashing_facilities FLOAT,
hospital_beds_per_thousand FLOAT,
life_expectancy FLOAT,
human_development_index FLOAT,
excess_mortality_cumulative_absolute VARCHAR(100),
excess_mortality_cumulative VARCHAR(100),
excess_mortality VARCHAR(100),
excess_mortality_cumulative_per_million VARCHAR(100)
);
			

-- Total Population vs Vaccinations
-- Shows Percentage of Population that has recieved at least one Covid Vaccine

Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS int)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
--, (RollingPeopleVaccinated/population)*100
From CovidDeaths dea
Join CovidVaccinations vac
	On dea.location = vac.location
	and dea.date = vac.date
where dea.continent is not null 
order by 2,3


-- Using CTE to perform Calculation on Partition By in previous query

With PopvsVac (Continent, Location, Date, Population, New_Vaccinations, RollingPeopleVaccinated)
as
(
Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS int)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
--, (RollingPeopleVaccinated/population)*100
From CovidDeaths dea
Join CovidVaccinations vac
	On dea.location = vac.location
	and dea.date = vac.date
where dea.continent is not null
order by 2,3
)
Select *, (RollingPeopleVaccinated/Population)*100
From PopvsVac



-- Using Temp Table to perform Calculation on Partition By in previous query

DROP Table if exists PercentPopulationVaccinated;
Create Table PercentPopulationVaccinated
(
Continent varchar(255),
Location varchar(255),
Date date,
Population numeric,
New_vaccinations numeric,
RollingPeopleVaccinated numeric
);

Insert into PercentPopulationVaccinated
Select dea.continent, dea.location, dea.Date, dea.population, (cast(vac.new_vaccinations as int))
, SUM(CAST(vac.new_vaccinations AS int)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
--, (RollingPeopleVaccinated/population)*100
From CovidDeaths dea
Join CovidVaccinations vac
	On dea.location = vac.location
	and dea.date = vac.date
--where dea.continent is not null 
order by 2,3;

Select *, (RollingPeopleVaccinated/Population)*100
From PercentPopulationVaccinated




-- Creating View to store data for later visualizations
												  
DROP Table if exists PercentPopulationVaccinated;
Create View PercentPopulationVaccinated as
Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS int)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
--, (RollingPeopleVaccinated/population)*100
From CovidDeaths dea
Join CovidVaccinations vac
	On dea.location = vac.location
	and dea.date = vac.date
where dea.continent is not null 
